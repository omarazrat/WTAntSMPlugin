/*
 * Web application tester- Utility to test web applications via Selenium 
 * Copyright (C) 2021-Nestor Arias
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 */
package antsm.com.tests.swing;

import java.awt.event.ItemEvent;
import java.io.ByteArrayOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import static java.util.stream.Collectors.toList;
import java.util.stream.IntStream;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.ListModel;
import oa.com.tests.actionrunners.exceptions.InvalidParamException;
import oa.com.tests.actionrunners.exceptions.InvalidVarNameException;
import antsm.com.tests.logic.CapacityInfo;
import antsm.com.tests.logic.JIRAReportInfo;
import antsm.com.tests.logic.SPReportInfo;
import antsm.com.tests.plugins.AntSMUtilites;
import static antsm.com.tests.plugins.AntSMUtilites.getConfigFile;
import antsm.com.tests.utils.ConfluenceHelper;
import static antsm.com.tests.utils.ConfluenceHelper.getCapacities;
import static antsm.com.tests.utils.ConfluenceHelper.getCapacitiesCache;
import static antsm.com.tests.utils.ConfluenceHelper.getCapacityURL;
import static antsm.com.tests.utils.ConfluenceHelper.inCapacitiesCache;
import antsm.com.tests.utils.JIRAReportHelper;
import static antsm.com.tests.utils.JIRAReportHelper.getJIRAName;
import static antsm.com.tests.utils.JIRAReportHelper.getJIRARCache;
import static antsm.com.tests.utils.JIRAReportHelper.getJIRAReports;
import static antsm.com.tests.utils.JIRAReportHelper.inJIRARCache;
import static antsm.com.tests.utils.PoiHelper.buildDatabaseWB;
import antsm.com.tests.utils.PythonReportHelper;
import static antsm.com.tests.utils.PythonReportHelper.getSPRCache;
import static antsm.com.tests.utils.PythonReportHelper.getSPReports;
import static antsm.com.tests.utils.PythonReportHelper.inSPRCache;
import java.io.File;
import java.nio.file.Path;
import javax.swing.JOptionPane;

/**
 *
 * @author nesto
 */
public class ControlPanel extends javax.swing.JFrame {

    private Properties sysProps;
    private Logger log = Logger.getLogger("WebAppTester");
    final String REGEXP_TEAMS_NAME = "^team\\.(.*)\\.capacity";

    /**
     * Creates new form ControlPanel
     */
    public ControlPanel() {
        sysProps = getConfigFile();
        initComponents();
    }

    private ListModel<String> getSprintsModel() {
        final List<String> sprints = IntStream.range(1, 27)
                .boxed().map(i -> "" + i).collect(toList());
        DefaultListModel<String> resp = new DefaultListModel<>();
        resp.addAll(sprints);
        return resp;
    }

    private ListModel<String> getTeamNamesModel() {
        List<String> names = getTeamNames();

        DefaultListModel<String> resp = new DefaultListModel<>();
        resp.addAll(names);
        return resp;
    }

    private List<String> getTeamNames() {
        Pattern pattern = Pattern.compile(REGEXP_TEAMS_NAME);
        final List<String> names = sysProps.entrySet()
                .stream().map(e -> {
                    Matcher matcher = pattern.matcher(e.getKey().toString());
                    if (matcher.matches()) {
                        return matcher.group(1);
                    }
                    return null;
                }).filter(e -> e != null)
                .sorted().
                collect(toList());
        return names;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        TeamL = new javax.swing.JLabel();
        SprintL = new javax.swing.JLabel();
        TeamSP = new javax.swing.JScrollPane();
        Team = new javax.swing.JList<>();
        TeamCBox = new javax.swing.JCheckBox();
        SprintSP = new javax.swing.JScrollPane();
        Sprint = new javax.swing.JList<>();
        SprintCBox = new javax.swing.JCheckBox();
        DatabaseBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);

        jTabbedPane1.setName("Database"); // NOI18N

        jPanel1.setLayout(new java.awt.GridBagLayout());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("antsm"); // NOI18N
        TeamL.setText(bundle.getString("labels.team.name")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        jPanel1.add(TeamL, gridBagConstraints);

        SprintL.setText(bundle.getString("labels.sprint")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        jPanel1.add(SprintL, gridBagConstraints);

        Team.setModel(getTeamNamesModel()
        );
        Team.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                TeamValueChanged(evt);
            }
        });
        TeamSP.setViewportView(Team);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(TeamSP, gridBagConstraints);

        TeamCBox.setText(bundle.getString("labels.all")); // NOI18N
        TeamCBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                AllTeamsStateChanged(evt);
            }
        });
        TeamCBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TeamCBoxStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        jPanel1.add(TeamCBox, gridBagConstraints);

        Sprint.setModel(getSprintsModel());
        Sprint.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                SprintValueChanged(evt);
            }
        });
        SprintSP.setViewportView(Sprint);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel1.add(SprintSP, gridBagConstraints);

        SprintCBox.setText(bundle.getString("labels.all")); // NOI18N
        SprintCBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                AllSprintsStateChanged(evt);
            }
        });
        SprintCBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SprintCBoxStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        jPanel1.add(SprintCBox, gridBagConstraints);

        DatabaseBtn.setText(bundle.getString("button.data_base.label")); // NOI18N
        DatabaseBtn.setEnabled(false);
        DatabaseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DatabaseBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        jPanel1.add(DatabaseBtn, gridBagConstraints);

        jTabbedPane1.addTab("Database", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AllTeamsStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_AllTeamsStateChanged
        final boolean enabled = evt.getStateChange() == ItemEvent.DESELECTED;
        Team.setEnabled(enabled);
        getContentPane().repaint();
    }//GEN-LAST:event_AllTeamsStateChanged

    private void AllSprintsStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_AllSprintsStateChanged
        final boolean enabled = evt.getStateChange() == ItemEvent.DESELECTED;
//        log.info("AllSprintsStateChanged to "+enabled);
        Sprint.setEnabled(enabled);
        getContentPane().repaint();
    }//GEN-LAST:event_AllSprintsStateChanged

    private void DatabaseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DatabaseBtnActionPerformed
//        log.info("Finding out stats for Data base ...");
        List<String> teamNames = TeamCBox.isSelected()
                ? getTeamNames()
                : Team.getSelectedValuesList();
        List<Integer> sprints = SprintCBox.isSelected()
                ? IntStream.range(1, 27).boxed().collect(toList())
                : new LinkedList<Integer>(Sprint.getSelectedValuesList().stream().map(Integer::parseInt).collect(toList()));

        String filePath="";
        try {
            login();
             final File outputFolder = new File("lib/antsm/output/");
             if(!outputFolder.exists())
                 outputFolder.mkdir();
            String slash = System.getProperty("file.separator");
            long suffix = System.currentTimeMillis();
            filePath = outputFolder.getAbsoluteFile()+slash+"output_"+suffix+".xlsx";
            File f= new File(filePath);
            if(f.exists()){
                f.delete();
            }
            buildDatabaseWB(filePath,teamNames, sprints);
        } catch (Exception ex) {
            Logger.getLogger(ControlPanel.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            logout();
            log.info("end of operation");
            JOptionPane.showMessageDialog(null, "Report saved to "+filePath);
        }
    }//GEN-LAST:event_DatabaseBtnActionPerformed

    private void TeamValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_TeamValueChanged
        updateBtnEnabledStatus();
    }//GEN-LAST:event_TeamValueChanged

    private void SprintValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_SprintValueChanged
        updateBtnEnabledStatus();
    }//GEN-LAST:event_SprintValueChanged

    private void TeamCBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TeamCBoxStateChanged
        updateBtnEnabledStatus();
    }//GEN-LAST:event_TeamCBoxStateChanged

    private void SprintCBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SprintCBoxStateChanged
        updateBtnEnabledStatus();
    }//GEN-LAST:event_SprintCBoxStateChanged

    private void login() throws InvalidParamException, IOException, InvalidVarNameException {
        //-login to Confluence
        ConfluenceHelper.login();
        //Login to JIRA
        JIRAReportHelper.login();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DatabaseBtn;
    private javax.swing.JList<String> Sprint;
    private javax.swing.JCheckBox SprintCBox;
    private javax.swing.JLabel SprintL;
    private javax.swing.JScrollPane SprintSP;
    private javax.swing.JList<String> Team;
    private javax.swing.JCheckBox TeamCBox;
    private javax.swing.JLabel TeamL;
    private javax.swing.JScrollPane TeamSP;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    private void logout() {
        try {
            ConfluenceHelper.logout();
            JIRAReportHelper.logout();
        } catch (Exception ex) {
            log.log(Level.SEVERE, null, ex);
        }
    }

    private void updateBtnEnabledStatus() {
        boolean enabled
                = (TeamCBox.isSelected() || Team.getSelectedIndex() > -1)
                && (SprintCBox.isSelected() || Sprint.getSelectedIndex() > -1);
        for (JButton btn : new JButton[]{DatabaseBtn}) {
            btn.setEnabled(enabled);
        }
        getContentPane().repaint();
    }

}
